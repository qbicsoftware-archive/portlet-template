package life.qbic.portlet;

import javax.portlet.PortletContext;
import javax.portlet.PortletSession;

import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.service.UserLocalServiceUtil;
import com.vaadin.annotations.Theme;
import com.vaadin.annotations.Widgetset;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.WrappedPortletSession;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Label;
import com.vaadin.ui.UI;
import com.vaadin.ui.Layout;
import com.vaadin.ui.VerticalLayout;
import life.qbic.portal.liferayandvaadinhelpers.main.LiferayAndVaadinUtils;

@Theme("mytheme")
@SuppressWarnings("serial")
@Widgetset("life.qbic.AppWidgetSet")
public class {{ cookiecutter.main_ui }} extends QBiCPortletUI {

    private final static Log LOG = LogFactoryUtil.getLog({{ cookiecutter.main_ui }}.class);

    @Override
    protected Layout getPortletContent(final VaadinRequest request) {
        // TODO: build the content for your portlet, this is just some sample code
        LOG.info("Generating content for portlet {{ cookiecutter.portlet_id }}");
        final VerticalLayout layout = new VerticalLayout();
        layout.setMargin(true);
        setContent(layout);

        final StringBuilder builder = new StringBuilder();
        if (LiferayAndVaadinUtils.isLiferayPortlet()) {
            builder.append("Hello, ").append(LiferayAndVaadinUtils.getUser().getScreenName()).append("!<br>");
            builder.append("This is portlet ").append(getPortletContextName(request)).append(".<br>");
            builder.append("This portal has ").append(getPortalCountOfRegisteredUsers()).append(" registered users (according to the data returned by Liferay's API call)");            
        } else {
            builder.append("You are currently in a local testing mode. No Liferay Portlet context found.<br>");            
        }

        builder.append("These are the variables you provided to generate this portlet:<br><br>");            
        // generated by cookiecutter
        {% for key, value in cookiecutter.items() %}
        builder.append("\"{{ key }}\": \"{{ value }}\"<br>");
        {% endfor %}
        // --
        
        final Label label = new Label(builder.toString(), ContentMode.HTML);
        final Button button = new Button("Click Me");
        button.addClickListener((Button.ClickListener) event -> layout.addComponent(label));
        layout.addComponent(button);
        return layout;
    }

    private String getPortletContextName(VaadinRequest request) {
        WrappedPortletSession wrappedPortletSession = (WrappedPortletSession) request
                .getWrappedSession();
        PortletSession portletSession = wrappedPortletSession
                .getPortletSession();

        final PortletContext context = portletSession.getPortletContext();
        final String portletContextName = context.getPortletContextName();
        return portletContextName;
    }

    private Integer getPortalCountOfRegisteredUsers() {
        Integer result = null;

        try {
            result = UserLocalServiceUtil.getUsersCount();
        } catch (SystemException e) {
            LOG.warn("Could not get user count", e);
        }

        return result;
    }
}
